[{"path":"/articles/tnl_Test.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"tnl_Test","text":"can install released version tnl.Test CRAN : Alternatively, can install development version GitHub using devtools package:","code":"install.packages(\"tnl.Test\") install.packages(\"devtools\") # if you have not installed \"devtools\" package devtools::install_github(\"ihababusaif/tnl.Test\")"},{"path":"/articles/tnl_Test.html","id":"details","dir":"Articles","previous_headings":"","what":"Details","title":"tnl_Test","text":"non-parametric two-sample test performed testing null hypothesis \\({H_0:F=G}\\) alternative hypothesis \\({H_1:F\\=G}\\). assumptions \\({T_n^{(\\ell)}}\\) test samples come continuous distribution samples sample size. Missing values silently omitted x y. Exact simulated p-values available \\({T_n^{(\\ell)}}\\) test. exact =“NULL” (default) p-value computed based exact distribution sample size less 11. Otherwise, p-value computed based Monte Carlo simulation. exact =“TRUE”, exact p-value computed. exact=“FALSE”, Monte Carlo simulation performed compute p-value. recommended calculate p-value Monte Carlo simulation (use exact=“FALSE”), takes long calculate exact p-value sample size greater 10.  probability mass function (pmf), cumulative density function (cdf) quantile function \\({T_n^{(\\ell)}}\\) also available package, -mentioned conditions exact =“NULL”, exact =“TRUE” exact=“FALSE” also valid functions. Exact distribution \\({T_n^{(\\ell)}}\\) test also computed Lehman alternative. Random number generator \\({T_n^{(\\ell)}}\\) test statistic provided null hypothesis library.","code":""},{"path":"/articles/tnl_Test.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"tnl_Test","text":"tnl.test function performs nonparametric test two sample test vectors data. ptnl gives distribution function \\({T_n^{(\\ell)}}\\) specified quantiles. dtnl gives density \\({T_n^{(\\ell)}}\\) specified quantiles. qtnl gives quantile function \\({T_n^{(\\ell)}}\\) specified probabilities. rtnl generates random values \\({T_n^{(\\ell)}}\\). tnl_mean gives expression \\(E({T_n^{(\\ell)}})\\) \\({H_0:F=G}\\). ptnl.lehmann gives distribution function \\({T_n^{(\\ell)}}\\) Lehmann alternatives. dtnl.lehmann gives density \\({T_n^{(\\ell)}}\\) Lehmann alternatives. qtnl.lehmann returns quantile function specified probabilities Lehmann alternatives. rtnl.lehmann generates random values \\({T_n^{(\\ell)}}\\) Lehmann alternatives.","code":"library(tnl.Test) require(stats)  x=rnorm(7,2,0.5)  y=rnorm(7,0,1)  tnl.test(x,y,l=2) #> $statistic #> [1] 2 #>  #> $p.value #> [1] 0.02447552 library(tnl.Test)  ptnl(q=2,n=6,m=9,l=2,exact=\"NULL\") #> $method #> [1] \"exact\" #>  #> $cdf #> [1] 0.01198801 library(tnl.Test)  dtnl(k=3,n=7,m=10,l=2,exact=\"TRUE\") #> $method #> [1] \"exact\" #>  #> $pmf #> [1] 0.02303579 library(tnl.Test)  qtnl(p=c(.1,.3,.5,.8,1),n=8,m=8,l=1,exact=\"NULL\",trial = 100000) #> $method #> [1] \"exact\" #>  #> $quantile #> [1] 2 3 4 6 8 library(tnl.Test)  rtnl(N=15,n=7,m=10,l=2) #>  [1] 7 7 7 3 7 7 6 7 7 7 6 6 4 7 7 library(tnl.Test) require(base)  tnl_mean(n.=11,m.=8, l=2) #> [1] 7.016657 library(tnl.Test) ptnl.lehmann(q=3, n.=7,m.=7,l = 2, gamma = 1.2) #> [1] 0.09275172 library(tnl.Test)  dtnl.lehmann(k=3, n.= 6,m.=8,l = 2, gamma = 0.8) #> [1] 0.04111771 library(tnl.Test) qtnl.lehmann(p=.3, n.=4,m.=7, l=1, gamma=0.5) #> [1] 3 library(tnl.Test) rtnl.lehmann(N = 15, n. = 7,m.=10, l = 2,gamma=0.5) #>  [1] 6 7 3 7 7 6 5 3 4 7 7 5 7 7 4"},{"path":"/articles/tnl_Test.html","id":"corresponding-author","dir":"Articles","previous_headings":"","what":"Corresponding Author","title":"tnl_Test","text":"Department Statistics, Faculty Science, Selcuk University, 42250, Konya, Turkey  www.researchgate.net/profile/Ihab-Abusaif  Email:censtat@gmail.com","code":""},{"path":"/articles/tnl_Test.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"tnl_Test","text":"Karakaya, K., Sert, S., Abusaif, ., Kuş, C., Ng, H. K. T., & Nagaraja, H. N. (2023). Class Non-parametric Tests Two-Sample Problem based Order Statistics Power Comparisons. Submitted paper. Aliev, F., Özbek, L., Kaya, M. F., Kuş, C., Ng, H. K. T., & Nagaraja, H. N. (2022). nonparametric test two-sample problem based order statistics. Communications Statistics-Theory Methods, 1-25.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ihab Abusaif. Maintainer, author.            https://www.researchgate.net/profile/Ihab-Abusaif Sümeyra Sert. Author.            https://www.researchgate.net/profile/Suemeyra-Sert Coşkun Kuş. Author.            https://www.researchgate.net/profile/Coskun-Kus Kadir Karakaya. Author.            https://www.researchgate.net/profile/Kadir-Karakaya-2 Hon Keung Tony Ng. Author. Haikady N. Nagaraja. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Abusaif , Sert S, Kuş C, Karakaya K, Ng H, Nagaraja H (2023). tnl.Test: Non-Parametric Tests Two-Sample Problem. R package version 0.1.0, https://github.com/ihababusaif/tnl.Test.","code":"@Manual{,   title = {tnl.Test: Non-Parametric Tests for the Two-Sample Problem},   author = {Ihab Abusaif and Sümeyra Sert and Coşkun Kuş and Kadir Karakaya and Hon Keung Tony Ng and Haikady N. Nagaraja},   year = {2023},   note = {R package version 0.1.0},   url = {https://github.com/ihababusaif/tnl.Test}, }"},{"path":"/index.html","id":"tnltest","dir":"","previous_headings":"","what":"Non-Parametric Tests for the Two-Sample Problem","title":"Non-Parametric Tests for the Two-Sample Problem","text":"goal tnl.Test provide functions perform hypothesis tests two sample problem based order statistics power comparisons.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Non-Parametric Tests for the Two-Sample Problem","text":"can install released version tnl.Test CRAN : Alternatively, can install development version GitHub using devtools package:","code":"install.packages(\"tnl.Test\") install.packages(\"devtools\") # if you have not installed \"devtools\" package devtools::install_github(\"ihababusaif/tnl.Test\")"},{"path":"/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"Non-Parametric Tests for the Two-Sample Problem","text":"non-parametric two-sample test performed testing null hypothesis H0 : F = G alternative hypothesis H1 : F ≠ G. assumptions Tn(ℓ) test samples come continuous distribution samples sample size. Missing values silently omitted x y. Exact simulated p-values available Tn(ℓ) test. exact =“NULL” (default) p-value computed based exact distribution sample size less 11. Otherwise, p-value computed based Monte Carlo simulation. exact =“TRUE”, exact p-value computed. exact=“FALSE”, Monte Carlo simulation performed compute p-value. recommended calculate p-value Monte Carlo simulation (use exact=“FALSE”), takes long calculate exact p-value sample size greater 10.  probability mass function (pmf), cumulative density function (cdf) quantile function Tn(ℓ) also available package, -mentioned conditions exact =“NULL”, exact =“TRUE” exact=“FALSE” also valid functions. Exact distribution Tn(ℓ) test also computed Lehman alternative. Random number generator Tn(ℓ) test statistic provided null hypothesis library.","code":""},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Non-Parametric Tests for the Two-Sample Problem","text":"tnl.test function performs nonparametric test two sample test vectors data. ptnl gives distribution function Tn(ℓ) specified quantiles. dtnl gives density Tn(ℓ) specified quantiles. qtnl gives quantile function Tn(ℓ) specified probabilities. rtnl generates random values Tn(ℓ). tnl_mean gives expression E(Tn(ℓ)) H0 : F = G. ptnl.lehmann gives distribution function Tn(ℓ) Lehmann alternatives. dtnl.lehmann gives density Tn(ℓ) Lehmann alternatives. qtnl.lehmann returns quantile function specified probabilities Lehmann alternatives. rtnl.lehmann generates random values Tn(ℓ) Lehmann alternatives.","code":"library(tnl.Test) require(stats)  x=rnorm(7,2,0.5)  y=rnorm(7,0,1)  tnl.test(x,y,l=2) #> $statistic #> [1] 2 #>  #> $p.value #> [1] 0.02447552 library(tnl.Test)  ptnl(q=2,n=6,m=9,l=2,exact=\"NULL\") #> $method #> [1] \"exact\" #>  #> $cdf #> [1] 0.01198801 library(tnl.Test)  dtnl(k=3,n=7,m=10,l=2,exact=\"TRUE\") #> $method #> [1] \"exact\" #>  #> $pmf #> [1] 0.02303579 library(tnl.Test)  qtnl(p=c(.1,.3,.5,.8,1),n=8,m=8,l=1,exact=\"NULL\",trial = 100000) #> $method #> [1] \"exact\" #>  #> $quantile #> [1] 2 3 4 6 8 library(tnl.Test)  rtnl(N=15,n=7,m=10,l=2) #>  [1] 7 7 6 7 5 4 7 7 7 5 7 7 7 7 5 library(tnl.Test) require(base)  tnl_mean(n.=11,m.=8, l=2) #> [1] 7.016657 library(tnl.Test) ptnl.lehmann(q=3, n.=7,m.=7,l = 2, gamma = 1.2) #> [1] 0.09275172 library(tnl.Test)  dtnl.lehmann(k=3, n.= 6,m.=8,l = 2, gamma = 0.8) #> [1] 0.04111771 library(tnl.Test) qtnl.lehmann(p=.3, n.=4,m.=7, l=1, gamma=0.5) #> [1] 3 library(tnl.Test) rtnl.lehmann(N = 15, n. = 7,m.=10, l = 2,gamma=0.5) #>  [1] 5 6 2 5 7 7 5 7 7 3 7 2 3 2 7"},{"path":"/index.html","id":"corresponding-author","dir":"","previous_headings":"","what":"Corresponding Author","title":"Non-Parametric Tests for the Two-Sample Problem","text":"Department Statistics, Faculty Science, Selcuk University, 42250, Konya, Turkey  www.researchgate.net/profile/Ihab-Abusaif  Email:censtat@gmail.com","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Non-Parametric Tests for the Two-Sample Problem","text":"Karakaya, K., Sert, S., Abusaif, ., Kuş, C., Ng, H. K. T., & Nagaraja, H. N. (2023). Class Non-parametric Tests Two-Sample Problem based Order Statistics Power Comparisons. Submitted paper. Aliev, F., Özbek, L., Kaya, M. F., Kuş, C., Ng, H. K. T., & Nagaraja, H. N. (2022). nonparametric test two-sample problem based order statistics. Communications Statistics-Theory Methods, 1-25.","code":""},{"path":"/reference/tnl.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-parametric tests for the two-sample problem based\non order statistics and power comparisons — tnl.test","title":"Non-parametric tests for the two-sample problem based\non order statistics and power comparisons — tnl.test","text":"tnl.test performs nonparametric test two sample test vectors data. ptnl gives distribution function \\(T_n^{(\\ell)}\\) specified quantiles. dtnl gives density \\(T_n^{(\\ell)}\\) specified quantiles. qtnl gives quantile function \\(T_n^{(\\ell)}\\) specified probabilities. rtnl generates random values \\(T_n^{(\\ell)}\\). tnl_mean() gives expression \\(E(T_n^{(\\ell)})\\) \\(H_0:F=G\\). ptnl.lehmann  gives  distribution function \\(T_n^{(\\ell)}\\) Lehmann alternatives. dtnl.lehmann  gives density \\(T_n^{(\\ell)}\\) Lehmann alternatives. qtnl.lehmann gives quantile function \\(T_n^{(\\ell)}\\) specified probabilities Lehmann alternatives. rtnl.lehmann generates random values \\(T_n^{(\\ell)}\\) Lehmann alternatives.","code":""},{"path":"/reference/tnl.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-parametric tests for the two-sample problem based\non order statistics and power comparisons — tnl.test","text":"","code":"tnl.test(x, y, l, exact = \"NULL\")  ptnl(q, n, m, l, exact = \"NULL\", trial = 1e+05)  dtnl(k, n, m, l, exact = \"NULL\", trial = 1e+05)  qtnl(p, n, m, l, exact = \"NULL\", trial = 1e+05)  rtnl(N, n, m, l)  tnl_mean(n., m., l)  ptnl.lehmann(q, n., m., l, gamma)  dtnl.lehmann(k, n., m., l, gamma)  qtnl.lehmann(p, n., m., l, gamma)  rtnl.lehmann(N, n., m., l, gamma)"},{"path":"/reference/tnl.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-parametric tests for the two-sample problem based\non order statistics and power comparisons — tnl.test","text":"x first (non-empty) numeric vector data values. y second (non-empty) numeric vector data values. l class parameter \\(T_n^{(\\ell)}\\). exact method used. \"NULL\" logical indicating whether exact computed. See 'Details' meaning NULL. n, m samples size. trial number trials simulation. k, q vector quantiles. p vector probabilities. N number observations. length(N) > 1, length taken number required. n., m. samples size. gamma parameter Lehmann alternative.","code":""},{"path":"/reference/tnl.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-parametric tests for the two-sample problem based\non order statistics and power comparisons — tnl.test","text":"tnl.test returns list following components statistic: value test statistic. p.value: p-value test. ptnl returns list following components method: method used (exact simulation). See 'Details'. cdf: distribution function \\(T_n^{(\\ell)}\\) specified quantiles. dtnl returns list following components method: method used (exact simulation). See 'Details'. pmf: density \\(T_n^{(\\ell)}\\) specified quantiles. qtnl returns list following components method: method used (exact simulation). See 'Details'. quantile: quantile function specified probabilities. rtnl return N generated random values. tnl_mean() return mean \\(T_n^{(\\ell)}\\). ptnl.lehmann return vector distribution Lehmann alternatives specified gamma. dtnl.lehmann return vector density Lehmann alternatives specified gamma. qtnl.lehmann returns quantile function specified probabilities Lehmann alternatives. rtnl.lehmann return N generated random values Lehmann alternatives.","code":""},{"path":"/reference/tnl.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-parametric tests for the two-sample problem based\non order statistics and power comparisons — tnl.test","text":"non-parametric two-sample test performed testing null hypothesis \\(H_0:F=G\\) alternative hypothesis \\(H_1:F\\= G\\). assumptions \\(T_n^{(\\ell)}\\) test samples come continuous distribution samples sample size. Missing values silently omitted \\(x\\) \\(y\\). Exact simulated p-values available \\(T_n^{(\\ell)}\\) test. exact =\"NULL\" (default) p-value computed based exact distribution sample size less 11. Otherwise, p-value computed based Monte Carlo simulation. exact =\"TRUE\", exact p-value computed. exact=\"FALSE\" , Monte Carlo simulation performed compute p-value. recommended calculate p-value Monte Carlo simulation (use exact=\"FALSE\"), takes long calculate exact p-value sample size greater 10. probability mass function (pmf), cumulative density function (cdf) quantile function \\(T_n^{(\\ell)}\\) also available package, -mentioned conditions exact =\"NULL\", exact =\"TRUE\" exact=\"FALSE\" also valid functions. Exact distribution \\(T_n^{(\\ell)}\\) test also computed Lehman alternative. Random number generator \\(T_n^{(\\ell)}\\) test statistic provided null hypothesis library.","code":""},{"path":"/reference/tnl.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Non-parametric tests for the two-sample problem based\non order statistics and power comparisons — tnl.test","text":"Karakaya, K., Sert, S., Abusaif, ., Kuş, C., Ng, H. K. T., & Nagaraja, H. N. (2023). Class Non-parametric Tests Two-Sample Problem based Order Statistics Power Comparisons. Submitted paper. Aliev, F., Özbek, L., Kaya, M. F., Kuş, C., Ng, H. K. T., & Nagaraja, H. N. (2022). nonparametric test two-sample problem based order statistics. Communications Statistics-Theory Methods, 1-25.","code":""},{"path":"/reference/tnl.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-parametric tests for the two-sample problem based\non order statistics and power comparisons — tnl.test","text":"","code":"require(stats) x <- rnorm(7, 2, 0.5) y <- rnorm(5, 0, 1) tnl.test(x, y, l = 2) #> $statistic #> [1] 2 #>  #> $p.value #> [1] 0.01515152 #>  ptnl(q = c(2, 5), n = 6, m = 5, l = 2, trial = 100000) #> $method #> [1] \"exact\" #>  #> $cdf #> [1] 0.02164502 1.00000000 #>  dtnl(k = c(1, 3, 6), n = 7, m = 5, l = 2) #> $method #> [1] \"exact\" #>  #> $pmf #> [1] 0.00000000 0.04671717 0.00000000 #>  qtnl(p = c(.3, .9), n = 4, m = 5, l = 1) #> $method #> [1] \"exact\" #>  #> $quantile #> [1] 3 4 #>  rtnl(N = 20, n = 7, m = 10, l = 1) #>  [1] 5 6 4 7 5 5 6 6 5 6 5 7 4 6 1 4 5 2 3 4 require(base) tnl_mean(n. = 11, m. = 8, l = 1) #> [1] 5.1693 ptnl.lehmann(q = 3, n. = 5, m. = 7, l = 2, gamma = 1.2) #> [1] 0.07471397 dtnl.lehmann(k = 3, n. = 6, m. = 5, l = 2, gamma = 0.8) #> [1] 0.07073467 qtnl.lehmann(p = c(.1, .5, .9), n. = 7, m. = 5, l = 1, gamma = 0.5) #> [1] 1 3 5 rtnl.lehmann(N = 15, n = 7,m=7, l = 2, gamma = 0.5) #>  [1] 6 7 5 6 7 6 3 7 4 4 5 3 7 5 4"},{"path":"/news/index.html","id":"tnltest-010","dir":"Changelog","previous_headings":"","what":"tnl.Test 0.1.0","title":"tnl.Test 0.1.0","text":"First public release.","code":""}]
